{"version":3,"sources":["images/chair_empty.png","images/chair_filled.png","components/Home.js","components/User.js","components/Search.js","components/BookFlight.js","components/Test.js","components/UserProfile.js","components/Users.js","components/NavBar.js","components/Airplanes.js","components/Flights.js","components/AdminHome.js","components/Footer.js","Routes.js","serviceWorker.js","index.js"],"names":["module","exports","Home","User","state","name","is_admin","_handleSubmit","bind","_handleInputName","_handleInputAdmin","event","preventDefault","axios","post","this","then","result","console","log","urlstr","window","location","href","includes","split","replace","setState","target","value","onSubmit","action","type","placeholder","required","onInput","defaultValue","onClick","defaultChecked","Component","SERVER_URL","Search","fetchFlights","f","t","get","results","listFlights","i","data","length","from","to","push","flights","hasLoaded","SearchForm","_handleInputFrom","_handleInputTo","toUpperCase","props","SearchResult","map","flight","key","id","date","flight_num","airplane_id","BookFlight","seats","lastChecked","SERVER_URL_FLIGHT","match","params","setTimeout","_handleCheck","uncheckSeat","_handleInput","persist","seatId","url","seatTaken","find","s","is_taken","checked","dataset","booked","taken_by_user","divGrid","display","gridTemplateColumns","airplane","columns","gridTemplateRows","rows","maxWidth","minWidth","divItemTaken","borderRadius","border","backgroundColor","color","margin","textAlign","padding","cursor","divItemFree","spanText","chairImg","width","height","divCheckbox","alphabet","className","style","sort","a","b","row","column","seat","htmlFor","data-booked","onChange","src","chair_filled","chair_empty","Test","UserProfile","user","fetchUser","reservation_column","reservation_row","Users","users","fetchUsers","NavBar","Airplanes","airplanes","fetchAirplanes","backgroundImage","backgroundSize","backgroundRepeat","minHeight","maxHeight","seatArray","j","seatFillers","Flights","saveFlight","Flightsform","_handleChange","for","Gallery","align","Footer","fontSize","Routes","exact","path","component","AdminHome","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ab7b03f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chair_empty.e143c198.png\";","module.exports = __webpack_public_path__ + \"static/media/chair_filled.fa6ad40d.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n    return (\n        <div>\n            <h2>Welcome to CrashTastic Airline </h2>\n        </div>\n    )\n};\n\nexport default Home;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n\n// use this URL to query using axios below\nconst SERVER_URL = 'http://localhost:3000/users.json';\n\nclass User extends Component {\n  constructor () {\n    super();\n    this.state = {\n      // set the name of the user in _handleInput\n      name: \"\",\n      is_admin: false\n    };\n\n    this._handleSubmit = this._handleSubmit.bind(this);\n    this._handleInputName = this._handleInputName.bind(this);\n    this._handleInputAdmin = this._handleInputAdmin.bind(this);\n  }\n\n  // when the form is submitted, make a post request to the backend to create a user.\n  _handleSubmit (event) {\n    event.preventDefault();\n    axios.post(SERVER_URL, { name: this.state.name, is_admin: this.state.is_admin }).then((result) => {\n      // clear the form\n      // TODO: handle the user in rails. How does this state persist?\n      console.log(result);\n      let urlstr = window.location.href;\n      if (urlstr.includes('#')) {\n        urlstr = urlstr.split('#')[0] + '#/'\n      }\n      window.location.replace(urlstr);\n    });\n  }\n\n  // as you change the input field, update the state.name to reflect\n  _handleInputName (event) {\n    this.setState({name: event.target.value})\n  }\n  _handleInputAdmin () {\n    this.setState({is_admin: true});\n  }\n    \n  render() {\n      return(\n          <form onSubmit={ this._handleSubmit } action=\"/\">\n          <label>\n            Name:\n            <input name=\"name\" type=\"text\" placeholder=\"type your name here\" required onInput={ this._handleInputName } defaultValue=\"\"/>\n          </label>\n          <br />\n          <label>\n          Is admin:\n          <input name=\"is_admin\"\n            type=\"checkbox\"\n            onClick={this._handleInputAdmin} defaultChecked={this.state.is_admin} />\n          </label>\n          <br />\n          <input type=\"submit\" value=\"Sign up\" />\n          </form>\n      );\n  }\n}\n\n\nexport default User;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nconst SERVER_URL = 'http://localhost:3000/flights.json';\n\nclass Search extends Component {\n    constructor () {\n        super();\n        this.state = {\n          flights: [],\n          hasLoaded: false\n        }\n        this.fetchFlights = this.fetchFlights.bind( this );\n      }\n       fetchFlights = (f, t) => {\n        axios.get(SERVER_URL).then((results) => {\n            // console.log(results.data);\n            let listFlights = [];\n            for (let i = 0; i < results.data.length; i++) {\n                if ( (results.data[i].from === f) && (results.data[i].to === t) )\n                // console.log(results.data[i]);\n                listFlights.push(results.data[i]);\n            };\n            this.setState({flights: listFlights});\n            console.log(this.state.flights);\n          })\n        };\n\n    render() {\n        return(\n            <div>\n                <h1>CrashTastic Airline</h1>\n                <SearchForm onSubmit={ this.fetchFlights } />\n                <SearchResult flights={ this.state.flights } />\n            </div>\n\n        );\n    }\n}\n\nclass SearchForm extends Component {\n    constructor() {\n        super();\n        this.state = {from: '', to: ''}\n        this._handleInputFrom = this._handleInputFrom.bind( this );\n        this._handleInputTo = this._handleInputTo.bind( this );\n        this._handleSubmit = this._handleSubmit.bind( this );\n    }\n    _handleInputFrom(event) {\n        this.setState({from: event.target.value.toUpperCase()})\n    }\n\n    _handleInputTo(event) {\n        this.setState({to: event.target.value.toUpperCase()})\n    }\n\n    _handleSubmit(event) {\n        event.preventDefault();\n        this.props.onSubmit(this.state.from, this.state.to);\n    }\n    render() {\n        return(\n            <form onSubmit={ this._handleSubmit }>\n                <input type=\"search\" placeholder=\"from\" required onInput={ this._handleInputFrom } defaultValue=\"\" />\n                <input type=\"search\" placeholder=\"to\" required onInput={ this._handleInputTo } defaultValue=\"\" />\n                <input type=\"submit\" value=\"search\" />\n            </form>\n        );\n    }\n}\nclass SearchResult extends Component {\n    render() {\n        return(\n            <div>\n                <h3>Flight Search Results</h3>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Date</th>\n                            <th>Flight</th>\n                            <th>From</th>\n                            <th> > </th>\n                            <th>To</th>\n                            <th>Plane</th>\n                        </tr>\n                    </thead>\n                    {this.props.flights.map( (flight) =>\n                    <tbody key={flight.id + 1}>\n                        <tr key={flight.id + 2}>\n                            <td key={flight.id + 3}>{flight.date}</td>\n                            <td key={flight.id + 4}><a href={ 'http://localhost:3001/#/flight/' + flight.id }>{flight.flight_num}</a></td>\n                            <td key={flight.id + 5}>{flight.from}</td>\n                            <td key={flight.id + 6}> > </td>\n                            <td key={flight.id + 7}>{flight.to}</td>\n                            <td key={flight.id + 8}>{flight.airplane_id}</td>\n                        </tr>\n                    </tbody>\n\n                )}\n                </table>\n\n\n            </div>\n        );\n    }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport User from './User';\nimport chair_empty from '../images/chair_empty.png';\nimport chair_filled from '../images/chair_filled.png';\n\nclass BookFlight extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      seats: \"\",\n      flight: \"\",\n      // hasLoaded to check whether the API request has completed before rendering below\n      hasLoaded: false,\n\n      lastChecked: \"\",\n\n      // set the name of the user in _handleInput\n      name: \"\",\n    };\n    // use this URL to query using axios below\n    const SERVER_URL_FLIGHT = 'http://localhost:3000/flights/' + this.props.match.params.id + '.json';\n    // fetch the information about the flight that this page is on\n    // recursively call every 4 secs to check if the seats have been checked by other users!\n    // TODO: add in user name to seat table\n    const fetchFlights = () => {axios.get(SERVER_URL_FLIGHT)\n        .then((results) => {\n          this.setState({\n            flight: results.data,\n            seats: results.data.flight.seats,\n            hasLoaded: true});\n            setTimeout(fetchFlights, 4000);\n            console.log(\"get\")\n        })};\n      fetchFlights();\n\n      // bind the handlecheck function so I can use this.\n      this._handleCheck = this._handleCheck.bind(this);\n      this.uncheckSeat = this.uncheckSeat.bind(this);\n      this._handleInput = this._handleInput.bind(this);\n  }\n\n// TODO: when you click twice on a is_taken true element, it will block the first time, then not run any of this code, and check the box. This won't affect the database.\n  _handleCheck (event) {\n    // OH GOD\n      event.preventDefault();\n      event.persist();\n\n    // when there is a change, we have to detect which one was unchecked, and there isnt a dom method for that so we loop through here and add it in to the ajax request.\n    // TODO: when the user checks a box, first check if it has been checked in the database since the last call.\n    const seatId = event.target.value;\n    // then check the box, and send this to the database so nobody else can snag the seat.\n    const url = \"http://localhost:3000/seats/\" + event.target.value + \".json\";\n    // use this URL to query using axios below\n    const SERVER_URL_FLIGHT = 'http://localhost:3000/flights/' + this.props.match.params.id + '.json';\n    axios.get(SERVER_URL_FLIGHT).then((results) => {\n      this.setState({ seats: results.data.flight.seats });\n      return results;\n    }).then((results) => {\n      const seatTaken = results.data.flight.seats.find((s) => { return s.id == seatId })\n      // check that it hasnt been selected by someone else.\n      console.log(\"seat taken \" + seatTaken.is_taken );\n      if (seatTaken.is_taken == false) {\n        event.target.checked = true;\n        // uncheck the lastChecked variable.\n\n        this.uncheckSeat();\n        // change the state of lastChecked to this element.\n        this.setState({lastChecked: event.target});\n        // change the database values\n        axios.post(url, {\n          is_taken: event.target.dataset.booked === \"true\" ? false : true,\n          taken_by_user: this.state.name,\n          }).then((results) => {\n          axios.get(SERVER_URL_FLIGHT).then((results) => {\n            this.setState({ seats: results.data.flight.seats });\n          })\n        });\n      }\n    });\n\n\n  }\n\n  uncheckSeat () {\n    console.log(this.state.lastChecked);\n    const SERVER_URL_FLIGHT = 'http://localhost:3000/flights/' + this.props.match.params.id + '.json';\n    const url = \"http://localhost:3000/seats/\" + this.state.lastChecked.value + \".json\";\n    axios.post(url, {\n      is_taken: false,\n      taken_by_user: \"\",\n      }).then((results) => {\n      axios.get(SERVER_URL_FLIGHT).then((results) => {\n        this.setState({ seats: results.data.flight.seats });\n      })});\n  }\n\n  // as you change the input field, update the state.name to reflect\n  _handleInput (event) {\n    this.setState({name: event.target.value});\n  }\n\n// TODO: when you press submit, save the data in the database, and take you to the users page.\n// Make association in database.\n  render() {\n    const flight = this.state.flight.flight;\n    if (flight) {\n\n      const divGrid = {\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(\" + flight.airplane.columns + \", 1fr)\",\n        gridTemplateRows: \"repeat(\" + flight.airplane.rows + \", 1fr)\",\n        maxWidth: \"800px\",\n        minWidth: \"300px\",\n      };\n\n      const divItemTaken = {\n        borderRadius: \"3px\",\n        border: \"1px solid #ccc\",\n        backgroundColor: \"#eee\",\n\n        color: \"#aaa\",\n        margin: \"1px\",\n        textAlign: \"center\",\n        padding: \"8px\",\n        cursor: \"not-allowed\"\n      }\n\n      const divItemFree = {\n        borderRadius: \"3px\",\n        border: \"1px solid #ccc\",\n        backgroundColor: \"#eee\",\n\n        color: \"#555\",\n        margin: \"1px\",\n        textAlign: \"center\",\n        padding: \"8px\",\n        cursor: \"pointer\"\n      }\n\n      const spanText = {\n      }\n      const chairImg = {\n        width: \"60px\",\n        height: \"60px\",\n        display: \"block\",\n      }\n\n      const divCheckbox = {\n        display: \"none\",\n      }\n      const seats = this.state.seats;\n      const alphabet = \"abcdefghijklmnopqrstuvwxyz\".toUpperCase().split('');\n      return(\n          <div>\n              <h1>Crapping Airline</h1>\n              <h2>Flight { flight.flight_num }</h2>\n              <p>{ flight.date } Flight { flight.flight_num } { flight.from } > { flight.to }</p>\n              <p>\n                Name:\n                <input type=\"text\" onInput={ this._handleInput } />\n              </p>\n              <p>Seats:</p>\n              <div className=\"planeContainer\">\n              <div style={divGrid}>\n                { seats.sort((a,b) => {\n                  return a.row - b.row || a.column - b.column\n                }).map((seat) =>\n                    <label htmlFor={ seat.id }  key={ seat.id } style={ seat.is_taken ? divItemTaken : divItemFree }>\n                      <input type=\"radio\" style={ divCheckbox } id={ seat.id } value={ seat.id } data-booked={ seat.is_taken ? true : false } onChange={ this._handleCheck } />\n                      <span style={spanText} >{ seat.column }{ alphabet[seat.row - 1] } { seat.taken_by_user }</span>\n                      <img src={ seat.is_taken ? chair_filled : chair_empty } style={chairImg} />\n                    </label>\n                  )\n                }\n                </div>\n              </div>\n          </div>\n      );\n    }\n    else {\n      return (\n        <p>loading</p>\n      )\n    }\n  }\n}\n\nexport default BookFlight;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n// use this URL to query using axios below\nconst SERVER_URL = 'http://localhost:3000/flights.json';\n\nclass Test extends Component {\n  constructor () {\n    super();\n    this.state = {\n      // the flights are loaded using axios below\n      flights: [],\n      // hasLoaded to check whether the API request has completed before rendering below\n      hasLoaded: false\n    };\n\n  // fetch the flights from the database every 4 seconds, save into state.flights to be used in render\n  const fetchFlights = () => {\n    axios.get(SERVER_URL).then((results) => {\n      this.setState({\n        flights: results.data,\n        hasLoaded: true});\n      setTimeout(fetchFlights, 4000);\n      })\n    };\n    fetchFlights();\n  }\n\n  render() {\n      return(\n          <div>\n              <h1>Crapping Airline</h1>\n              <p>Testing whether we can communicate to rails. To do this we need to recieve:\n                  flights\n              </p>\n                <p>{ this.state.flights.map((flight) => <p><a href={ 'http://localhost:3001/#/flight/' + flight.id }>{flight.date}: flight {flight.id} from {flight.from} to {flight.to} on airplane {flight.airplane_id}</a></p>)}\n                </p>\n          </div>\n      );\n  }\n}\n\nexport default Test;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass UserProfile extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      // set the name of the user in _handleInput\n      user: \"\",\n      hasLoaded: false,\n    };\n\n    // use this URL to query using axios below\n    const SERVER_URL = 'http://localhost:3000/users/' + this.props.match.params.id + '.json';\n\n    const fetchUser = () => {axios.get(SERVER_URL)\n        .then((results) => {\n          this.setState({\n            user: results.data,\n            hasLoaded: true});\n            setTimeout(fetchUser, 4000);\n        })};\n    fetchUser();\n  }\n\n  render() {\n    if (this.state.hasLoaded) {\n      return(\n        <div>\n          <h1>User Profile: { this.state.user.user.name }</h1>\n          <p>name: { this.state.user.user.name }</p>\n          <p>admin: { this.state.user.user.is_admin ? \"true\" : \"false\" }</p>\n          <p>flights:\n            <ul>\n            { this.state.user.user.flights.map((flight) => {\n              return <li><a href={ 'http://localhost:3001/#/flight/' + flight.id }>Flight: { flight.from } > { flight.to }, Seat: { flight.reservation_column }{ flight.reservation_row }</a></li>\n            }) }\n            </ul>\n\n          </p>\n        </div>\n      );\n    }\n    else {\n      return  <div>loading...</div>\n    }\n  }\n}\n\nexport default UserProfile;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n// use this URL to query using axios below\nconst SERVER_URL = 'http://localhost:3000/users.json';\n\nclass Users extends Component {\n  constructor () {\n    super();\n    this.state = {\n      // the flights are loaded using axios below\n      users: [],\n      // hasLoaded to check whether the API request has completed before rendering below\n      hasLoaded: false\n    };\n\n  // fetch the flights from the database every 4 seconds, save into state.flights to be used in render\n  const fetchUsers = () => {\n    axios.get(SERVER_URL).then((results) => {\n      this.setState({\n        users: results.data,\n        hasLoaded: true});\n      setTimeout(fetchUsers, 4000);\n      })\n    };\n    fetchUsers();\n  }\n\n  render() {\n      return(\n          <div>\n              <h1>Crapping Airline</h1>\n              <h2>All Users</h2>\n                <p>{ this.state.users.map((user) => <p><a href={ 'http://localhost:3001/#/user/' + user.id }>{user.name}, admin: { user.is_admin ? \"true\" : \"false\" }</a></p>)}\n                </p>\n          </div>\n      );\n  }\n}\n\nexport default Users;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass NavBar extends Component {\n  render() {\n    return(\n      <div>\n            <Link to=\"/user\">Log in</Link>  |\n            <Link to=\"/search\">Search flight</Link>  |\n            <Link to=\"/flights\">All flights</Link>  |\n            <Link to=\"/users\">All users</Link>  |\n\n            <Link to=\"/admin\">Admin</Link>  |\n            <Link to=\"/admin/airplanes\">Create Airplane</Link>  |  \n            <Link to=\"/admin/flights\">Create flight</Link>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport chair_empty from '../images/chair_empty.png';\nimport chair_filled from '../images/chair_filled.png';\n\n// use this URL to query using axios below\nconst SERVER_URL = 'http://localhost:3000/airplanes.json';\n\n\nclass Airplanes extends Component {\n  constructor () {\n    super();\n    this.state = {\n      // the airplanes are loaded using axios below\n      airplanes: [],\n      // hasLoaded to check whether the API request has completed before rendering below\n      hasLoaded: false\n    };\n\n  // fetch the airplanes from the database every 4 seconds, save into state.airplanes to be used in render\n  const fetchAirplanes = () => {\n    axios.get(SERVER_URL).then((results) => {\n      // console.log(results.data[0]);\n      this.setState({\n        airplanes: results.data,\n        hasLoaded: true});\n      setTimeout(fetchAirplanes, 4000);\n      })\n    };\n    fetchAirplanes();\n  }\n\n  render() {\n    const plane = this.state.airplanes;\n    const background = '/../images/chair_empty.png';\n    const divItemFree = {\n      borderRadius: \"3px\",\n      border: \"1px solid #ccc\",\n      backgroundColor: \"#eee\",\n      backgroundImage: \"url(\" + chair_empty + \")\",\n      backgroundSize: \"contain\",\n      backgroundRepeat: \"no-repeat\",\n      color: \"#555\",\n      margin: \"1px\",\n      textAlign: \"center\",\n      padding: \"8px\",\n    }\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\".toUpperCase().split('');\n\n      return(\n          <div>\n              <h1>Creat a New Airplane</h1>\n              <form>\n                <label htmlFor=\"name\">Name: </label>\n                <input type=\"text\" id=\"name\" placeholder=\"name\" />\n\n                <label htmlFor=\"rows\">Rows: </label>\n                <input type=\"number\" id=\"rows\" placeholder=\"5\" />\n\n                <label htmlFor=\"columns\">Columns: </label>\n                <input type=\"number\" id=\"columns\" placeholder=\"43\" />\n\n                <input type=\"submit\" value=\"Create\" />\n              </form>\n              <h2>All Airplanes</h2>\n                { this.state.airplanes.map((airplane) => {\n                  const divGrid = {\n                    display: \"grid\",\n                    gridTemplateColumns: \"repeat(\" + airplane.columns + \", auto)\",\n                    gridTemplateRows: \"repeat(\" + airplane.rows + \", auto)\",\n                    minWidth: \"300px\",\n                    maxWidth: \"400px\",\n                    minHeight: \"300px\",\n                    maxHeight: \"400px\",\n                  };\n                  let seatArray = [];\n                  let seats = airplane.rows * airplane.columns;\n                  for (let i=0; i < airplane.rows; i++) {\n                    for (let j=1; j < airplane.columns + 1; j++) {\n                      seatArray.push(j + alphabet[i]);\n                    }\n\n                  }\n                  let seatFillers = [];\n                  for (let i=0; i < seats; i++) {\n                    seatFillers.push(i);\n                  }\n                   return <div key={airplane.id}>\n                    <p> Airplane {airplane.name}: rows {airplane.rows} columns {airplane.columns}</p>\n                    <div style={divGrid}>\n                      { seatArray.map((s) => <div key={s} style={ divItemFree }>{s}</div>) }\n                    </div>\n                  </div>\n                })}\n          </div>\n      );\n  }\n}\n\n\n// class SeatDiagram extends Component {\n// const alphabet = \"abcdefghijklmnopqrstuvwxyz\".toUpperCase().split('');\n// }\n\n\nexport default Airplanes;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst SERVER_URL = 'http://localhost:3000/flights.json';\n\nclass Flights extends Component {\n  constructor () {\n    super();\n    this.state = {\n      flights: [],\n      // hasLoaded to check whether the API request has completed before rendering below\n      hasLoaded: false\n    };\n    this.saveFlight = this.saveFlight.bind(this);\n\n  // fetch the flights from the database every 4 seconds, save into state.flights to be used in render\n  const fetchFlights = () => {\n    axios.get(SERVER_URL).then((results) => {\n      this.setState({\n        flights: results.data,\n        hasLoaded: true});\n      setTimeout(fetchFlights, 4000);\n      })\n    };\n\n    fetchFlights();\n    }\n\n    saveFlight(flight_num) {\n      axios.post(SERVER_URL, {flight_num: flight_num}).then((result) => {\n\n      this.setState({flights: [... this.state.flights, result.data]})\n      });\n  }\n\n  render(){\n      return (\n        <div>\n  \t     <h1> Burning Flights</h1>\n  \t      <Flightsform onSubmit={ this.saveFlight } />\n          <Gallery flights={ this.state.flights } />\n          {/*so pretty much the secret from te SecretForm child goes up to the parent and then gets pushed into the secrets Gallery child. */}\n        </div>\n      );\n    }\n  }\n\n// -- Flight Form -- //\nclass Flightsform extends Component {\n  constructor(){\n    super();\n    this.state = { flight_num: '' }\n    this._handleChange = this._handleChange.bind(this);\n    this._handleSubmit = this._handleSubmit.bind(this);\n  }\n\n  _handleSubmit(event) {\n    event.preventDefault();\n    this.props.onSubmit(this.state.flight_num);\n    this.setState( { flight_num: '' }); // Reset the form.\n  }\n\n  _handleChange(event){\n    this.setState( { flight_num: event.target.value } );\n  }\n\n\n  render() {\n    return (\n      <form onSubmit={ this._handleSubmit }>\n\n      <label for=\"flight_num\">Flight #</label>\n      <input onChange={this._handleChange} value={this.state.flight_num} type=\"number\" name=\"flight_num\" required />\n\n      <label for=\"date\">Date</label>\n      <input type=\"date\" name=\"date\" required />\n\n      <label for=\"from\">From</label>\n      <input type=\"text\" name=\"from\" required />\n\n      <label for=\"to\">To</label>\n      <input type=\"text\" name=\"to\" required />\n\n      <label for=\"airplane_id\">Airplane</label>\n      <input type=\"number\" name=\"airplane_id\" required />\n\n      <button type=\"submit\" value=\"Tell\" >Create Flight</button>\n\n      </form>\n    );\n  }\n}\n\n\n// -- Flight Gallery -- //\nclass Gallery extends Component{\n  render(){\n    return(\n      <div>\n        <h3>All existing flights</h3>\n          <table>\n            <thead>\n              <tr>\n                <th width=\"20%\">Date</th>\n                <th width=\"20%\">Flight</th>\n                <th width=\"20%\">From > To</th>\n                <th width=\"20%\">Plane</th>\n                <th width=\"20%\">Seats</th>\n              </tr>\n            </thead>\n            {this.props.flights.map( (flight) =>\n            <tbody>\n              <tr>\n                <td align=\"center\">{flight.date}</td>\n                <td align=\"center\"><a href={ 'http://localhost:3001/#/flight/' + flight.id }> {flight.flight_num}</a></td>\n                <td align=\"center\">{flight.from.toUpperCase()} > {flight.to.toUpperCase()}</td>\n                <td align=\"center\">{flight.airplane_id}</td>\n                <td align=\"center\">Seat</td>\n              </tr>\n            </tbody>\n            )}\n          </table>\n      </div>\n    );\n  }\n}\n\n\nexport default Flights;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n    return (\n        <div>\n            <h2>Welcome to CrashTastic Airlines, what would you like to do today?</h2>\n            <p><Link to=\"/admin/flights\">Create a Flight</Link></p>\n            <p><Link to=\"/admin/airplanes\">Create an Airplane</Link></p>\n        </div>\n    )\n};\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Footer extends Component {\n  render() {\n    const footerStyle = {\n      padding: \"50px 0 30px 0\",\n      color: \"grey\",\n      fontSize: \"12px\",\n      textAlign: \"right\"\n    }\n    return(\n      <div style={footerStyle}>\n        Thank you for booking your flights with us.\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React from 'react';\n\n// HashRouter is strongly preffered to save headaches with deployment.\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport User from './components/User';\nimport Search from './components/Search';\nimport BookFlight from './components/BookFlight';\nimport Test from './components/Test';\nimport UserProfile from './components/UserProfile';\nimport Users from './components/Users';\nimport Navbar from './components/NavBar';\nimport Airplanes from './components/Airplanes';\nimport Flights from './components/Flights';\nimport AdminHome from './components/AdminHome';\nimport Footer from './components/Footer';\n\n\n// Not a functional component. It's just a collection of JSX.\nconst Routes = (\n    <Router>\n    <div style={{\n      maxWidth: \"1000px\",\n      margin: \"0 auto\",\n      textAlign: \"center\"\n    }}>\n      <Navbar />\n          <div>\n              <Route exact path=\"/\" component={ Home } />\n              <Route exact path=\"/user\" component={ User } />\n              <Route exact path=\"/search\" component={ Search } />\n              <Route exact path=\"/flights\" component={ Test } />\n              <Route exact path=\"/admin\" component={ AdminHome } />\n              <Route exact path=\"/admin/airplanes\" component={ Airplanes } />\n              <Route exact path=\"/admin/flights\" component={ Flights } />\n              <Route path=\"/flight/:id\" component={ BookFlight } />\n              <Route exact path=\"/users\" component={ Users } />\n              <Route path=\"/user/:id\" component={ UserProfile } />\n          </div>\n        <Footer />\n      </div>\n    </Router>\n);\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(Routes, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}